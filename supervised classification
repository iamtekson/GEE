/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var l8 = ee.ImageCollection("LANDSAT/LC08/C01/T1_RT"),
    pokhara = ee.FeatureCollection("users/teksondada/pokhara");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//cloud free computing
var image = ee.Algorithms.Landsat.simpleComposite({
  collection: l8.filterDate('2018-01-01', '2018-12-31'),
  asFloat: true
});
print(image)

//Useful bands for prediction
var bands = ['B2','B3','B4', 'B5', 'B6', 'B7', 'B10', 'B11'];


//Load training points. The numeric property 'class' stores known labels.
var points = ee.FeatureCollection('projects/google/demo_landcover_labels')
print(points)

//This property of the table stores the land cover labels
var label = 'landcover';

//Overlay th points on the imagery to get training.
var training = image.select(bands).sampleRegions({
  collection: points,
  properties:[label],
  scale: 30
});

//Train a randomForest/CART classifier with default parameters.
var trained = ee.Classifier.randomForest().train(training, label, bands);

//Classify the image with the same bands used for training.
var classified = image.select(bands).classify(trained);

//Display the inputs and the results.
Map.centerObject(pokhara, 11);
Map.addLayer(image, {bands:['B4', 'B3', 'B2'], max: 0.4}, 'image');
Map.addLayer(classified, {
  min: 0,
  max: 2,
  palette: ['red', 'green', 'blue']
}, 'classification');

//Confusion matrix
print('confusion matrix: ', trained.confusionMatrix());
print('accuracy: ', trained.confusionMatrix().accuracy())










